name: Release x64

on: workflow_dispatch
#  push:
#     tags:
#      - v[0-9]+.*

# workflow_dispatch

env:
  WHERE_VERSION: 0.0.8
  USE_HARD_LINKS: false

jobs:
  # the create-release would be used once we want to create a specific release based on if the commit has a tag
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/create-gh-release-action@v1
        env:
          # (required)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-dna:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # install hc tool
      - name: Install hc tool and wasm target
        shell: bash # important because this runs shell scripts
        run: |
          npm run ci:hc-install
      # build dna
      - name: Build DNA
        run: |
          npm run build:happ
      # "upload" dna as build artifact
      - uses: actions/upload-artifact@master
        with:
          name: where-dna-artifact
          path: dna/workdir/dna/where.dna
      # "upload" happ as build artifact
      - uses: actions/upload-artifact@master
        with:
          name: where-happ-artifact
          path: dna/workdir/happ/where.happ
      # Setup npm
      - name: Install nodejs dependencies
        run: |
          npm install where --ignore-scripts
      # Build happ
      - name: Build happ
        run: |
          npm run build:ui
      # Build web-happ
      - name: Build web-happ
        run: |
          npm run build:webapp
      # "upload" web-happ as build artifact
      - uses: actions/upload-artifact@master
        with:
          name: where-webapp-artifact
          path: workdir/where.webhapp

  # upload the app package for each target os
  build-binaries:
    needs: build-dna
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout repo
      - uses: actions/checkout@v2
      # Download previously uploaded artifacts
      - uses: actions/download-artifact@master
        with:
          name: where-dna-artifact
          path: dna/workdir/dna
      - uses: actions/download-artifact@master
        with:
          name: where-happ-artifact
          path: dna/workdir/happ
      - uses: actions/download-artifact@master
        with:
          name: where-webapp-artifact
          path: workdir
      # Check if exist
      - name: list webhapp
        continue-on-error: true
        run: ls -R
        working-directory: workdir
      # Setup npm
      - name: Install nodejs dependencies
        run: |
          npm install
          npm run ci:ui-install
          npm run ci:electron-install
      - name: Install nodejs dependencies (2)
        continue-on-error: true
        run: |
          npm run ci:app-install
      # Build happ
      - name: Build happ
        run: |
          npm run build
      # Setup sign & notarize
      #- name: Setup sign and notarize (macos only)
      #  continue-on-error: true
      #  if: ${{ runner.os == 'macOs' }}
      #  uses:  figleafteam/import-codesign-certs@v2
      #  with:
      #    p12-file-base64: ${{ secrets.HBE_APPLE_CERTIFICATE_BASE64 }}
      #    p12-password: ${{ secrets.HBE_APPLE_CERTIFICATE_PASS }}
      # Build installers and binaries
      - name: Build binaries
        shell: bash
        env:
          #WIN_CSC_LINK: ${{ steps.write_file.outputs.filePath }}
          #WIN_CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
          APPLE_DEV_IDENTITY: ${{ secrets.APPLE_DEV_IDENTITY }}
          APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          DEBUG: electron-osx-sign*,electron-notarize*
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run dist
      # upload installers and binaries
      - name: list builds
        continue-on-error: true
        run: ls
        working-directory: electron/out
      #
      - name: list releases
        continue-on-error: true
        run: |
          gh release list
      # upload binary for each platform
      - name: upload binary (ubuntu only)
        if: ${{ runner.os == 'Linux' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "refs/tags/v0.0.8-rc6" "electron/out/Where-$WHERE_VERSION.AppImage" --clobber
          gh release upload "refs/tags/v0.0.8-rc6" "dna/workdir/happ/where.happ" --clobber
          gh release upload "refs/tags/v0.0.8-rc6" "workdir/where.webhapp" --clobber
      - name: upload binary (macos only)
        if: ${{ runner.os == 'macOs' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "refs/tags/v0.0.8-rc6" "electron/out/Where-$WHERE_VERSION.dmg" --clobber
      - name: upload binary (Windows only)
        if: ${{ runner.os == 'Windows' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "refs/tags/v0.0.8-rc6" "electron/out/Where.Setup.$env:WHERE_VERSION.exe" --clobber
