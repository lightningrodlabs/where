/* This file is generated by zits. Do not edit manually */

import {
/** Types */
HoloHash,
AgentPubKey,
DnaHash,
WasmHash,
EntryHash,
ActionHash,
AnyDhtHash,
KitsuneAgent,
KitsuneSpace,
HoloHashB64,
AgentPubKeyB64,
DnaHashB64,
WasmHashB64,
EntryHashB64,
ActionHashB64,
AnyDhtHashB64,
InstalledAppId,
Signature,
CellId,
DnaProperties,
RoleName,
InstalledCell,
Timestamp,
HoloHashed,
NetworkInfo,
FetchQueueInfo,
/** Action */
SignedActionHashed,
ActionHashed,
ActionType,
Action,
NewEntryAction,
Dna,
AgentValidationPkg,
InitZomesComplete,
CreateLink,
DeleteLink,
OpenChain,
CloseChain,
Update,
Delete,
Create,
/** Capabilities */
CapSecret,
CapClaim,
ZomeCallCapGrant,
CapAccess,
CapGrant,
GrantedFunctionsType,
/** CounterSigning */
//CounterSigningSessionData,
//PreflightRequest,
//CounterSigningSessionTimes,
//ActionBase,
//CounterSigningAgents,
//PreflightBytes,
//Role,
//CountersigningAgentState,
/** DhtOps */
DhtOpType,
DhtOp,
getDhtOpType,
getDhtOpAction,
getDhtOpEntry,
getDhtOpSignature,
/** Entry */
EntryVisibility,
AppEntryDef,
EntryType,
EntryContent,
Entry,
/** Record */
Record as HcRecord,
RecordEntry as HcRecordEntry,
/** admin types */
InstalledAppInfoStatus,
StemCell,
Cell,
CellType,
CellInfo,
AppInfo,
MembraneProof,
FunctionName,
ZomeName,
ZomeDefinition,
IntegrityZome,
CoordinatorZome,
DnaDefinition,
ResourceBytes,
ResourceMap,
CellProvisioning,
DnaVersionSpec,
DnaVersionFlexible,
NetworkSeed,
ZomeLocation,
   } from '@holochain/client';

import {
/** Common */
DhtOpHashB64,
DhtOpHash,
/** DnaFile */
DnaFile,
DnaDef,
Zomes,
WasmCode,
/** entry-details */
EntryDetails,
RecordDetails,
Details,
DetailsType,
EntryDhtStatus,
/** Validation */
ValidationStatus,
ValidationReceipt,
   } from '@holochain-open-dev/core-types';

export interface ExportPieceInput {
  cellId: CellId
  pieceEh: EntryHashB64
  pieceTypeName: string
}

export interface ExportSpaceInput {
  cellId: CellId
  spaceEh: EntryHashB64
}

export interface GetInventoryOutput {
  templates: EntryHashB64[]
  svgMarkers: EntryHashB64[]
  emojiGroups: EntryHashB64[]
  spaces: EntryHashB64[]
}

export interface ImportPieceInput {
  piece_type_name: string
  piece_entry: Entry
}

export interface EmojiGroupOutput {
  hash: EntryHashB64
  content: EmojiGroup
}

/**  */
export interface SpaceOutput {
  hash: EntryHashB64
  content: Space
}

export interface SvgMarkerOutput {
  hash: EntryHashB64
  content: SvgMarker
}

export interface TemplateOutput {
  hash: EntryHashB64
  content: Template
}

export enum PlaysetEntryType {
	SvgMarker = 'SvgMarker',
	EmojiGroup = 'EmojiGroup',
	Template = 'Template',
	Space = 'Space',
}
export type PlaysetEntryVariantSvgMarker = {SvgMarker: SvgMarker}
export type PlaysetEntryVariantEmojiGroup = {EmojiGroup: EmojiGroup}
export type PlaysetEntryVariantTemplate = {Template: Template}
export type PlaysetEntryVariantSpace = {Space: Space}
export type PlaysetEntry = 
 | PlaysetEntryVariantSvgMarker | PlaysetEntryVariantEmojiGroup | PlaysetEntryVariantTemplate | PlaysetEntryVariantSpace;

/** EmojiGroup Entry */
export interface EmojiGroup {
  name: string
  description: string
  unicodes: string[]
}

export enum MarkerPieceType {
	Svg = 'Svg',
	EmojiGroup = 'EmojiGroup',
}
export type MarkerPieceVariantSvg = {svg: EntryHashB64}
export type MarkerPieceVariantEmojiGroup = {emojiGroup: EntryHashB64}
export type MarkerPiece = 
 | MarkerPieceVariantSvg | MarkerPieceVariantEmojiGroup;

/** Space entry definition */
export interface Space {
  name: string
  origin: EntryHashB64
  surface: string
  maybeMarkerPiece?: MarkerPiece
  meta: Record<string, string>
}

/** SvgMarker Entry */
export interface SvgMarker {
  name: string
  value: string
}

/** Template Entry */
export interface Template {
  name: string
  surface: string
}
